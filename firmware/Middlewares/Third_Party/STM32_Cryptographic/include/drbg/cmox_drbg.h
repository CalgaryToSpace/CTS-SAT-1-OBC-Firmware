/**
  ******************************************************************************
  * @file    cmox_drbg.h
  * @author  MCD Application Team
  * @brief   Header file for the DRBG module
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef CMOX_DRBG_H
#define CMOX_DRBG_H

/* Include files -------------------------------------------------------------*/
#include <stdint.h>
#include <stddef.h>
#include "cmox_drbg_retvals.h"

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */

/**
  * @addtogroup CMOX_DRBG
  * @{
  */

/* Macros --------------------------------------------------------------------*/

/* Public types --------------------------------------------------------------*/

/** @defgroup CMOX_DRBG_PUBLIC_TYPES DRBG module public types
  * @{
  */

/**
  * @brief DRBG Virtual Table
  *
  * This type specifies a pointer to the virtual table containing the methods
  * for a particular algorithm (currently the only supported is CTR-DRBG)
  */
typedef const struct cmox_drbg_vtableStruct_st *cmox_drbg_vtable_t;

/**
  * @brief DRBG handle structure definition
  */
typedef struct
{
  cmox_drbg_vtable_t table;  /*!< DRBG virtual table */
} cmox_drbg_handle_t;

/**
  * @}
  */

/* Public methods prototypes -------------------------------------------------*/

/** @defgroup CMOX_DRBG_PUBLIC_METHODS DRBG public method prototypes
  * @{
  */

/**
  * @brief Cleanup the DRBG handle
  *
  * @param P_pThis DRBG handle to cleanup
  * @return cmox_drbg_retval_t DRBG return value
  */
cmox_drbg_retval_t cmox_drbg_cleanup(cmox_drbg_handle_t *P_pThis);

/**
  * @brief Initialize the DRBG engine
  *
  * @param P_pThis DRBG handler to initialize
  * @param P_pEntropy Buffer of bytes containing the entropy bytes
  * @param P_entropyLen Number of entropy bytes that will be used to seed the DRBG
  * @param P_pPersonalString Buffer of bytes containing the personalization string
  * @param P_personalStringLen Size in bytes of the personalization string
  * @param P_pNonce Buffer of bytes containing nonce data
  * @param P_nonceLen Size in bytes of the nonce
  * @return cmox_drbg_retval_t DRBG return value
  */
cmox_drbg_retval_t cmox_drbg_init(cmox_drbg_handle_t *P_pThis,
                                  const uint8_t *P_pEntropy,
                                  size_t P_entropyLen,
                                  const uint8_t *P_pPersonalString,
                                  size_t P_personalStringLen,
                                  const uint8_t *P_pNonce,
                                  size_t P_nonceLen);

/**
  * @brief Reseed the DRBG
  *
  * @param P_pThis DRBG handler to initialize
  * @param P_pEntropy Buffer of bytes containing the entropy bytes
  * @param P_entropyLen Number of entropy bytes that will be used to seed the DRBG
  * @param P_pAdditionalInput Buffer of bytes containing additional input
  * @param P_additionalInputLen Size in bytes of the additional input
  * @return cmox_drbg_retval_t DRBG return value
  */
cmox_drbg_retval_t cmox_drbg_reseed(cmox_drbg_handle_t *P_pThis,
                                    const uint8_t *P_pEntropy,
                                    size_t P_entropyLen,
                                    const uint8_t *P_pAdditionalInput,
                                    size_t P_additionalInputLen);

/**
  * @brief  Generation of pseudorandom octets to a buffer
  *
  * @param P_pThis DRBG handler to initialize
  * @param P_pAdditionalInput Buffer of bytes containing additional input
  * @param P_additionalInputLen Size in bytes of the additional input
  * @param P_pOutput Buffer of bytes where the generated bytes will be stored
  * @param P_desiredOutputLen Desired number of random bytes to produce
  * @return cmox_drbg_retval_t DRBG return value
  */
cmox_drbg_retval_t cmox_drbg_generate(cmox_drbg_handle_t *P_pThis,
                                      const uint8_t *P_pAdditionalInput,
                                      size_t P_additionalInputLen,
                                      uint8_t *P_pOutput,
                                      size_t P_desiredOutputLen);

/**
  * @}
  */

/**
  * @}
  */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CMOX_DRBG_H */


/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
